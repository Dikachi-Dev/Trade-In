using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Mail;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TradeIn.Data;
using TradeIn.Models;

namespace TradeIn.Pages
{
    public class TabletModel : PageModel
    {
        private readonly TradeIn.Data.TradeInContext _context;

        public TabletModel(TradeIn.Data.TradeInContext context)
        {
            _context = context;
        }

        [BindProperty]
        public EstimateRef EstimateReference { get; set; } = default!;

        public List<Brand> Brands { get; private set; } = default!;
        public Valuation Estimated { get; private set; } = default!;

        public async Task<IActionResult> OnGet()
        {
            Brands = await _context.Brands.Where(b => b.Category == "Tablet").ToListAsync();
            return Page();
        }

        public async Task<JsonResult> OnGetModels(int Id)
        {
            var FilteredModeel = await _context.Models.Where(m => m.BrandId == Id).ToListAsync();

            return new JsonResult(FilteredModeel);
        }

        // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
        public async Task<IActionResult> OnPostAsync()
        {
            var generator = new Number();
            EstimateReference.Refnumber = generator.InitialNumber();
            EstimateReference.Estimatedate = DateTime.Now;
            EstimateReference.Category = "Tablet";
            EstimateReference.Generation = 0;
            Estimated = await _context.Valuations.Where(v => v.Category == "Tablet" && v.Brand == EstimateReference.Brand && v.Model == EstimateReference.Model && v.Condition == EstimateReference.Condition).FirstAsync();
            EstimateReference.Amount = Estimated.Price;
            EstimateReference.OtherItem = "";
            if (EstimateReference == null)
            {
                return Page();
            }

            Contact info = new Contact();
            {
                info.Email = EstimateReference.Email;
                info.Name = EstimateReference.FirstName + " " + EstimateReference.LastName;
                info.PhoneNumber = EstimateReference.PhoneNumber;
            }

            if (_context.Contacts.Any(x => x.Name == info.Name && x.Email == info.Email && x.PhoneNumber == info.PhoneNumber))
            {
                _context.EstimateRefs.Add(EstimateReference);
            }
            else
            {
                _context.EstimateRefs.Add(EstimateReference);
                _context.Contacts.Add(info);
            }
            string body = "<h2>Hello, </h2><p>Thank you for your email. </p><p>Your message is important to us and one of our  sales and support team will be in touch with you shortly.</p><p> We aim to respond to all emails within 1-24 hours. </p><p>Thank you, </p> <p>Computer Hub Trade-in Team.</p><p> -- </p> <p>Kind regards,</p><p> The Computer Hub Trade-In Team</p>";
            string subject = "Computer Hub Tradin Quote";

            Helper.SendEmails(body, EstimateReference.Email, subject);
            Helper.SendEmails("<p>New Estimate generated by</p>" + EstimateReference.Email, "admin@computerhubtradein.co.uk", "A customer generated new estimate");

            await _context.SaveChangesAsync();

            return RedirectToPage("./Result", new { refId = EstimateReference.Refnumber });
        }
    }
}
